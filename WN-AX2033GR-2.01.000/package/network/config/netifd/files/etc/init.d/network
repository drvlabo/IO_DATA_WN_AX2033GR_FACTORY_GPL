#!/bin/sh /etc/rc.common

START=20
STOP=90

USE_PROCD=1

#__MSTC__, Vincent: MT7621's EEE function enable/disable
load_eee() {
  local enable
  config_get enable $1 enable

  if [ -n "$enable" -o "$enable" = "1" ]; then
  	[ -f /usr/sbin/switch-eee.sh ] && {
	    echo "Start switch EEE (smart_speed) "
	    sleep 3
	    local command="/usr/sbin/switch-eee.sh $enable"
	    eval $command
    }
	else
		# if EEE function is disabled, make switch again to linkup (linkdown in init_switch )
	    mii_mgr -p 0 -l up
	    mii_mgr -p 1 -l up
	    mii_mgr -p 2 -l up
	    mii_mgr -p 3 -l up
	    mii_mgr -p 4 -l up
	fi
	
	config_load network
	config_get wan_mode wan mode
	config_get ifce_automode "wan" "ifce_automode"
	ROUTER_AP_MODE="1"
	auto_gpio_num=`/sbin/uci -c /etc/buttons.d/ get buttons.auto_bridge_on.gpio_num`
	switch_val=`gpio g $auto_gpio_num | awk '{print $4}' 2>/dev/null` #return 0:repeater/1:router,ap
	if [ "$switch_val" == "$ROUTER_AP_MODE" ] && [ "$ifce_automode" == "0x01" ]; then
		sleep 4
		wan_link_stat=`/usr/bin/switch reg r 3008 | sed 's/^.*=//g' | awk '{print substr($0, length($0), length($0))}'`
		echo "wan_link_stat: $wan_link_stat"  > /dev/console
		if [ "$wan_link_stat" != "0" ]; then
			touch /tmp/boot_with_wan_connected
		fi
	fi


}

init_switch_eee() {
	config_load system
	config_foreach load_eee eee
}

init_switch() {
	setup_switch() { return 0; }

	include /lib/network
	setup_switch
}

start_service() {
	init_switch

	procd_open_instance
	procd_set_param command /sbin/netifd
	procd_set_param respawn
	procd_set_param watch network.interface
	[ -e /proc/sys/kernel/core_pattern ] && {
		procd_set_param limits core="unlimited"
		echo '/tmp/%e.%p.%s.%t.core' > /proc/sys/kernel/core_pattern
	}
	procd_close_instance
}


stop_service() {

	#MSTC MBA Sean, remove V6 pass 
	rmmod v6pass
	rmmod v6passCompat

	/sbin/wifi down
}

service_running() {
	rmmod hw_nat
	rmmod nf_sc
	ubus -t 30 wait_for network.interface
	/sbin/wifi reload_legacy
	sleep 3
	init_switch
	#MBA Terence insert module by config
	[ "`uci get system.hwnat.enable`" == "1" ] && {
	insmod /lib/modules/ralink/hw_nat.ko
	}
	insmod /lib/modules/ralink/nf_sc.ko
	#__MSTC__, Vincent: MT7621's EEE function enable/disable
 	init_switch_eee
}

validate_atm_bridge_section()
{
	uci_validate_section network "atm-bridge" "${1}" \
		'unit:uinteger:0' \
		'vci:range(32, 65535):35' \
		'vpi:range(0, 255):8' \
		'atmdev:uinteger:0' \
		'encaps:or("llc", "vc"):llc' \
		'payload:or("bridged", "routed"):bridged'
}

validate_route_section()
{
	uci_validate_section network route "${1}" \
		'interface:string' \
		'target:cidr4' \
		'netmask:netmask4' \
		'gateway:ip4addr' \
		'metric:uinteger' \
		'mtu:uinteger' \
		'table:or(range(0,65535),string)'
}

validate_route6_section()
{
	uci_validate_section network route6 "${1}" \
		'interface:string' \
		'target:cidr6' \
		'gateway:ip6addr' \
		'metric:uinteger' \
		'mtu:uinteger' \
		'table:or(range(0,65535),string)'
}

validate_rule_section()
{
	uci_validate_section network rule "${1}" \
		'in:string' \
		'out:string' \
		'src:cidr4' \
		'dest:cidr4' \
		'tos:range(0,31)' \
		'mark:string' \
		'invert:bool' \
		'lookup:or(range(0,65535),string)' \
		'goto:range(0,65535)' \
		'action:or("prohibit", "unreachable", "blackhole", "throw")'
}

validate_rule6_section()
{
	uci_validate_section network rule6 "${1}" \
		'in:string' \
		'out:string' \
		'src:cidr6' \
		'dest:cidr6' \
		'tos:range(0,31)' \
		'mark:string' \
		'invert:bool' \
		'lookup:or(range(0,65535),string)' \
		'goto:range(0,65535)' \
		'action:or("prohibit", "unreachable", "blackhole", "throw")'
}

validate_switch_section()
{
	uci_validate_section network switch "${1}" \
		'name:string' \
		'enable:bool' \
		'enable_vlan:bool' \
		'reset:bool'
}

validate_switch_vlan()
{
	uci_validate_section network switch_vlan "${1}" \
		'device:string' \
		'vlan:uinteger' \
		'ports:list(ports)'
}

service_triggers()
{
	procd_add_reload_trigger network wireless

	procd_open_validate
	validate_atm_bridge_section
	validate_route_section
	validate_route6_section
	validate_rule_section
	validate_rule6_section
	validate_switch_section
	validate_switch_vlan
	procd_close_validate
}

#MBA Sean unregister interface in hw_nat first to aviod deadlock of resource
unreg_wifi_hwnat()
{
	vifs=`uci show wireless | grep "=wifi-iface" | sed -n "s/=wifi-iface//gp"`

	for vif in $vifs; do
		local netif
		netif=`uci -q get ${vif}.ifname`
		iwpriv $netif set hw_nat_register=0
		echo "unregister $netif in hw_nat !!!!!"
	done
}

restart() {
	#MBA Sean unregister interface in hw_nat first to aviod deadlock of resource
	unreg_wifi_hwnat
	rmmod hw_nat
	rmmod nf_sc
	#MSTC MBA Sean, remove V6 pass 
	rmmod v6pass
	rmmod v6passCompat
	
	ubus call network.interface.wan down
	sleep 1
	ifdown -a
	sleep 1
	trap '' TERM
	stop "$@"
	start "$@"
	#insmod /lib/modules/ralink/hw_nat.ko
	insmod /lib/modules/ralink/nf_sc.ko
}

reload_service() {
#	rmmod hw_nat
#	init_switch
#	ubus call network reload
#	/sbin/wifi reload_legacy
#	insmod /lib/modules/ralink/hw_nat.ko
#	mii_mgr -s -p 0 -r 0 -v 3300
#	mii_mgr -s -p 1 -r 0 -v 3300
#	mii_mgr -s -p 2 -r 0 -v 3300
#	mii_mgr -s -p 3 -r 0 -v 3300
    restart
}

shutdown() {
	rmmod hw_nat
	rmmod nf_sc
	ubus call network.interface.wan down
	sleep 1
	ifdown -a
	stop
}
