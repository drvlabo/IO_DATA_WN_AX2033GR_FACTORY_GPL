Index: uci-2014-04-11.1/cli.c
===================================================================
--- uci-2014-04-11.1.orig/cli.c	2016-04-07 16:14:10.014688155 +0800
+++ uci-2014-04-11.1/cli.c	2016-04-07 15:25:12.507164000 +0800
@@ -69,121 +69,10 @@
 #ifdef CONFIG_PACKAGE_uci_MSTC_DUAL_CONFIG_UCI_COMMIT
 extern int gint_pathc;
 extern int gint_commitChange;
-extern char **g_allocMem;
 extern int gint_config_num;
 #endif
 static int uci_cmd(int argc, char **argv);
 
-
-#ifdef CONFIG_PACKAGE_uci_MSTC_DUAL_CONFIG_UCI_COMMIT
-char **mallocFileNameStrings(int rows){
-	char **buf = (char **) malloc(sizeof(char *)*rows);
-	
-	if(buf != NULL){
-		return buf;
-	} else{
-		return NULL;
-	}
-}
-
-void freeFileNameStrings(int rows){
-    int i;
-	
-    for(i=0; i<rows; i++){
-		if(g_allocMem[i] != NULL){
-			free(g_allocMem[i]);
-			g_allocMem[i] = NULL;
-		}
-	}
-	if(g_allocMem != NULL){
-		free(g_allocMem);
-		g_allocMem = NULL;
-	}
-}
-
-/*
- * parse uci config file name white list
- */
-int parseConfigWhiteList(){
-	FILE *input = NULL;
-	FILE *wc = NULL;
-	char *find = NULL;
-	char wordCount_str[16] = {0};
-	int wordCount = 0;
-	char str[512];
-	int i;
-	
-	snprintf(str, sizeof(str), "wc -w %s | sed 's/ .*//g'", MSTC_UCI_CFG_FILE_WHITE_LIST);
-	wc = popen(str,"r");
-	if(wc != NULL){
-		if( fgets(wordCount_str, sizeof(wordCount_str), wc) != NULL ){
-			if(wordCount_str != NULL){
-				wordCount = atoi(wordCount_str);
-				if(0 == wordCount){
-					fprintf(stderr,"Empty uci config file white list\n");
-					return 1;
-				}
-			}
-		}
-		pclose(wc);
-	} else {
-		perror("uci");
-		return 1;
-	}
-	
-	
-	input = fopen(MSTC_UCI_CFG_FILE_WHITE_LIST, "r");
-	if (!input) {
-		perror("uci");
-		return 1;
-	}
-	
-	gint_config_num = wordCount;
-
-	g_allocMem = mallocFileNameStrings(gint_config_num);
-	
-	if(g_allocMem != NULL){
-		i = 0;
-		 while(!feof(input)){
-			memset(str, 0, sizeof(str));
-			if( fgets(str, sizeof(str), input) != NULL ){
-				if( (find = strrchr(str, '\n')) ){
-					*find = '\0';
-				} else {
-					char ch;
-					while (((ch = fgetc(input)) != EOF) && (ch != '\n'));
-				}
-				
-				if ( i<gint_config_num )
-				{
-					g_allocMem[i] = (char *) malloc(1+strlen(str));
-					if(g_allocMem[i] != NULL){
-						memset(g_allocMem[i], 0, 1+strlen(str));
-						strncpy(g_allocMem[i], str, strlen(str));
-						i++;
-					} else {
-						freeFileNameStrings(i);
-						goto err;
-					}
-				}
-			}
-		 }
-	}
-	else {
-		goto err;
-	}
-
-	//freeFileNameStrings is called in uci_do_package_cmd()
-	//free g_allocMem[i] and g_allocMem after uci commit is finished
-	
-	fclose(input);	
-	return 0;
-err:
-	fclose(input);
-	return 1;
-}
-#endif //#ifdef CONFIG_PACKAGE_uci_MSTC_DUAL_CONFIG_UCI_COMMIT
-
 static void
 uci_reset_typelist(void)
 {
Index: uci-2014-04-11.1/file.c
===================================================================
--- uci-2014-04-11.1.orig/file.c	2016-04-07 16:14:09.990639759 +0800
+++ uci-2014-04-11.1/file.c	2016-04-07 15:26:03.291176000 +0800
@@ -40,7 +40,6 @@
 
 #ifdef CONFIG_PACKAGE_uci_MSTC_DUAL_CONFIG_UCI_COMMIT
 int gint_pathc = 0;
-char g_dirName[128] = {0};
 char **g_allocMem;
 int gint_config_num;
 
@@ -49,21 +48,127 @@
  */
 int checkConfigWhiteList(char *filename){
 	int i;
-	
+
 	if( (g_allocMem != NULL) && (filename != NULL) ){
 		for(i=0; i<gint_config_num; i++){
 			if( g_allocMem[i] != NULL ){
 				//fprintf(stderr,"### g_allocMem[%d]=%s ###\n", i, g_allocMem[i]);
 				if(strcmp(filename, g_allocMem[i]) == 0){
-					return 1;
+					return 1;
 				}
-			}
+			}
 		}
 	}
-	return 0;
+	return 0;
 }
 
-#endif 
+char **mallocFileNameStrings(int rows){
+	char **buf = (char **) malloc(sizeof(char *)*rows);
+	
+	if(buf != NULL){
+		return buf;
+	} else{
+		return NULL;
+	}
+}
+
+void freeFileNameStrings(int rows){
+    int i;
+	
+    for(i=0; i<rows; i++){
+		if(g_allocMem[i] != NULL){
+			free(g_allocMem[i]);
+			g_allocMem[i] = NULL;
+		}
+	}
+	if(g_allocMem != NULL){
+		free(g_allocMem);
+		g_allocMem = NULL;
+	}
+}
+
+/*
+ * parse uci config file name white list
+ */
+int parseConfigWhiteList(){
+	FILE *input = NULL;
+	FILE *wc = NULL;
+	char *find = NULL;
+	char wordCount_str[16] = {0};
+	int wordCount = 0;
+	char str[512];
+	int i;
+	
+	snprintf(str, sizeof(str), "wc -w %s | sed 's/ .*//g'", MSTC_UCI_CFG_FILE_WHITE_LIST);
+	wc = popen(str,"r");
+	if(wc != NULL){
+		if( fgets(wordCount_str, sizeof(wordCount_str), wc) != NULL ){
+			if(wordCount_str != NULL){
+				wordCount = atoi(wordCount_str);
+				if(0 == wordCount){
+					fprintf(stderr,"Empty uci config file white list\n");
+					return 1;
+				}
+			}
+		}
+		pclose(wc);
+	} else {
+		perror("uci");
+		return 1;
+	}
+	
+	
+	input = fopen(MSTC_UCI_CFG_FILE_WHITE_LIST, "r");
+	if (!input) {
+		perror("uci");
+		return 1;
+	}
+	
+	gint_config_num = wordCount;
+
+	g_allocMem = mallocFileNameStrings(gint_config_num);
+	
+	if(g_allocMem != NULL){
+		i = 0;
+		 while(!feof(input)){
+			memset(str, 0, sizeof(str));
+			if( fgets(str, sizeof(str), input) != NULL ){
+				if( (find = strrchr(str, '\n')) ){
+					*find = '\0';
+				} else {
+					char ch;
+					while (((ch = fgetc(input)) != EOF) && (ch != '\n'));
+				}
+				
+				if ( i<gint_config_num )
+				{
+					g_allocMem[i] = (char *) malloc(1+strlen(str));
+					if(g_allocMem[i] != NULL){
+						memset(g_allocMem[i], 0, 1+strlen(str));
+						strncpy(g_allocMem[i], str, strlen(str));
+						i++;
+					} else {
+						freeFileNameStrings(i);
+						goto err;
+					}
+				}
+			}
+		 }
+	}
+	else {
+		goto err;
+	}
+
+	//freeFileNameStrings is called in uci_do_package_cmd()
+	//free g_allocMem[i] and g_allocMem after uci commit is finished
+	
+	fclose(input);	
+	return 0;
+err:
+	fclose(input);
+	return 1;
+}
+#endif //#ifdef CONFIG_PACKAGE_uci_MSTC_DUAL_CONFIG_UCI_COMMIT
 
 /*
  * Fetch a new line from the input stream and resize buffer if necessary
@@ -735,7 +840,7 @@
 		else
 			UCI_THROW(ctx, UCI_ERR_INVAL);
 	}
-	
+
 	if ((asprintf(&filename, "%s/.%s.uci-XXXXXX", ctx->confdir, p->e.name) < 0) || !filename)
 		UCI_THROW(ctx, UCI_ERR_MEM);
 
Index: uci-2014-04-11.1/lua/uci.c
===================================================================
--- uci-2014-04-11.1.orig/lua/uci.c	2016-04-07 16:14:10.031230039 +0800
+++ uci-2014-04-11.1/lua/uci.c	2016-04-07 16:23:22.118655859 +0800
@@ -20,6 +20,9 @@
 #include <unistd.h>
 #include <stdio.h>
 #include <errno.h>
+#ifdef CONFIG_PACKAGE_uci_MSTC_DUAL_CONFIG_UCI_COMMIT
+#include <sys/wait.h>
+#endif
 
 #include <lauxlib.h>
 #include <uci.h>
@@ -36,6 +39,12 @@
 
 static struct uci_context *global_ctx = NULL;
 
+#ifdef CONFIG_PACKAGE_uci_MSTC_DUAL_CONFIG_UCI_COMMIT
+extern int gint_pathc;
+extern int gint_commitChange;
+extern int gint_config_num;
+#endif
+
 static struct uci_context *
 find_context(lua_State *L, int *offset)
 {
@@ -648,6 +657,20 @@
 	struct uci_ptr ptr;
 	char *s = NULL;
 	int nargs, offset = 0;
+	#ifdef CONFIG_PACKAGE_uci_MSTC_DUAL_CONFIG_UCI_COMMIT
+	char **config = NULL;
+	int chkCfg = 0;
+	char buf[128] = {0};
+	int status = 0;
+	FILE *file_before = NULL;
+	FILE *file_after = NULL;
+	char chksum1_str[32] = {0};
+	char chksum2_str[32] = {0};
+	char size1_str[32] = {0};
+	unsigned long chksum1;
+	unsigned long chksum2;
+	int i;
+	#endif
 
 	ctx = find_context(L, &offset);
 	nargs = lua_gettop(L);
@@ -661,14 +684,57 @@
 
 	uci_foreach_element_safe(&ctx->root, tmp, e) {
 		struct uci_package *p = uci_to_package(e);
-
+		//fprintf(stderr,"ptr.p->e.name=%s\n", ptr.p->e.name);
+		//fprintf(stderr,"p->e.name=%s\n", p->e.name);
 		if (ptr.p && (ptr.p != p))
 			continue;
 
 		ptr.p = p;
 		switch(cmd) {
 		case CMD_COMMIT:
-			uci_commit(ctx, &p, false);
+			#ifdef CONFIG_PACKAGE_uci_MSTC_DUAL_CONFIG_UCI_COMMIT
+			chkCfg = 1;
+			//remove the temporary file before doing uci commit; 
+			//it contains all config file contents before rename file to /etc/config
+			snprintf(buf, sizeof(buf), "rm -f %s", CONFIG_ALL_UCI_COMMIT);
+			status = system(buf);
+			if(status < 0){			
+				fprintf(stderr,"cmd: %s\t error: %s", buf, strerror(errno));			
+				return 1;	
+			}
+				
+			if(WIFEXITED(status))
+			{
+				//printf("normal termination, exit status = %d\n", WEXITSTATUS(status));
+			}
+			else if(WIFSIGNALED(status))
+			{
+				fprintf(stderr,"abnormal termination,signal number =%d\n", WTERMSIG(status));
+			}
+			else if(WIFSTOPPED(status))
+			{
+				fprintf(stderr,"process stopped, signal number =%d\n", WSTOPSIG(status));
+			}
+			parseConfigWhiteList();
+			
+			if (uci_list_configs(ctx, &config) != 0)
+				goto err;
+			#endif
+
+			#ifdef CONFIG_PACKAGE_uci_MSTC_DUAL_CONFIG_UCI_COMMIT
+			for (i=0; i<gint_pathc; i++) {
+				if(config[i]){
+					uci_lookup_ptr(ctx, &ptr, config[i], true);
+			#endif
+			#ifdef CONFIG_PACKAGE_uci_MSTC_DUAL_CONFIG_UCI_COMMIT
+					uci_commit(ctx, &ptr.p, false);
+			#else
+					uci_commit(ctx, &p, false);
+			#endif
+			#ifdef CONFIG_PACKAGE_uci_MSTC_DUAL_CONFIG_UCI_COMMIT
+				}
+			}			
+			#endif
 			break;
 		case CMD_SAVE:
 			uci_save(ctx, p);
@@ -679,6 +745,72 @@
 		}
 	}
 
+	#ifdef CONFIG_PACKAGE_uci_MSTC_DUAL_CONFIG_UCI_COMMIT	
+	if(1 == chkCfg){
+		//set cfgapply to 1 in persist partition if there are different config values; else do nothing
+		if(1 == gint_commitChange){
+			snprintf(buf, sizeof(buf),"%s write %s 1", MSTC_PERSIST, MSTC_PERSIST_CFGAPPLY);
+			system(buf);
+			fprintf(stderr,"### Set cfgapply to 1 LUA ###\n");
+		} else {
+			fprintf(stderr,"### DO NOT set cfgapply LUA ###\n");
+		}
+				
+		snprintf(buf, sizeof(buf), "%s chksum %s",  MSTC_CFG_CHKSUM, CONFIG_ALL_UCI_COMMIT);
+		file_before = popen(buf,"r");
+		if(file_before != NULL){
+			if( fgets(chksum1_str, sizeof(chksum1_str), file_before) != NULL )
+				;
+			pclose(file_before);			
+		} else {
+			goto err;
+		}
+				
+		snprintf(buf,sizeof(buf), "%s chksum 1", MSTC_CFG_CHKSUM);
+		file_after = popen(buf,"r");
+		if(file_after != NULL){
+			if( fgets(chksum2_str, sizeof(chksum2_str), file_after) != NULL )
+				;
+			pclose(file_after);
+		} else {
+			goto err;
+		}
+				
+		chksum1 = strtoul (chksum1_str, NULL, 16);
+		chksum2 = strtoul (chksum2_str, NULL, 16);
+
+		/* compare the two checksums before and after rename merged file to /etc/config;
+		if different, do resotre from config 2 */
+		if(chksum1 != chksum2){
+			snprintf(buf,sizeof(buf), "%s restore",  MSTC_CFG_CHKSUM);
+			system(buf);
+		} else {
+			if(1 == gint_commitChange){
+				//write cfg1Chksum to persist partition
+				snprintf(buf, sizeof(buf),"%s write %s %s", MSTC_PERSIST, MSTC_PERSIST_CFG1CHKSUM, chksum1_str);
+				system(buf);
+						
+				//write cfg1Size to persist partition
+				snprintf(buf, sizeof(buf), "%s size %s",  MSTC_CFG_CHKSUM, CONFIG_ALL_UCI_COMMIT);
+				file_before = popen(buf,"r");
+				if(file_before != NULL){
+					if( fgets(size1_str, sizeof(size1_str), file_before) != NULL )
+						;
+					pclose(file_before);
+				} else {
+					goto err;
+				}
+
+				snprintf(buf, sizeof(buf),"%s write %s %s", MSTC_PERSIST, MSTC_PERSIST_CFG1SIZE, size1_str);
+				system(buf);
+			} else {
+				fprintf(stderr,"### Checksum is the same but commit does not change anything! Do nothing! LUA ###\n");
+			}
+		}
+		freeFileNameStrings(gint_config_num);
+	}
+	#endif
+
 err:
 	if (s)
 		free(s);
Index: uci-2014-04-11.1/uci.h
===================================================================
--- uci-2014-04-11.1.orig/uci.h	2016-04-07 16:14:09.983357935 +0800
+++ uci-2014-04-11.1/uci.h	2016-04-07 15:19:18.730709000 +0800
@@ -80,6 +80,9 @@
 struct uci_parse_context;
 
 #ifdef CONFIG_PACKAGE_uci_MSTC_DUAL_CONFIG_UCI_COMMIT
+char **mallocFileNameStrings(int rows);
+void freeFileNameStrings(int rows);
+int parseConfigWhiteList();
 int checkConfigWhiteList(char *filename);
 #endif
 
