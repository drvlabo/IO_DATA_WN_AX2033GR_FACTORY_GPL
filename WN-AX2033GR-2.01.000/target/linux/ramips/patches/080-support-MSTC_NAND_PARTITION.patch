Index: linux-3.10.14/drivers/mtd/nand/partition.h
===================================================================
--- linux-3.10.14.orig/drivers/mtd/nand/partition.h	2015-12-31 12:16:17.000000000 +0800
+++ linux-3.10.14/drivers/mtd/nand/partition.h	2016-02-01 11:32:22.317324517 +0800
@@ -9,6 +9,11 @@
 #define MTD_FACTORY_PART_SIZE   0x20000
 
 extern unsigned int  CFG_BLOCKSIZE;
+
+/* __MSTC__, Smith, support MSTC NAND partition */
+#if defined(CONFIG_SUPPORT_MSTC_NAND_PARTITION)
+#include "mstc_partitions.h"
+#else
 #define LARGE_MTD_BOOT_PART_SIZE       (CFG_BLOCKSIZE<<2)
 #define LARGE_MTD_CONFIG_PART_SIZE     (CFG_BLOCKSIZE<<2)
 #define LARGE_MTD_FACTORY_PART_SIZE    (CFG_BLOCKSIZE<<1)
@@ -16,12 +21,20 @@
 #ifdef CONFIG_RT2880_ROOTFS_IN_FLASH
 #define MTD_ROOTFS_RESERVED_BLOCK	0x80000  // (CFG_BLOCKSIZE<<2)
 #endif
+#endif
 
 #include "../maps/ralink-flash.h"
 
 /*=======================================================================*/
 /* NAND PARTITION Mapping                                                  */
 /*=======================================================================*/
+
+#if defined(CONFIG_SUPPORT_MSTC_NAND_PARTITION)
+/*
+    __MSTC__, Smith, support MSTC NAND partition
+    If enabled CONFIG_SUPPORT_MSTC_NAND_PARTITION, partition table is write in mstc_partitions.h
+*/
+#else
 #if defined(CONFIG_SUPPORT_OPENWRT)
 static struct mtd_partition g_pasStatic_Partition[] = {
 	{
@@ -111,6 +124,7 @@
 };
 
 #endif /* CONFIG_SUPPORT_OPENWRT */
+#endif /* CONFIG_SUPPORT_MSTC_NAND_PARTITION */
 #define NUM_PARTITIONS ARRAY_SIZE(g_pasStatic_Partition)
 extern int part_num;	// = NUM_PARTITIONS;
 //#endif
Index: linux-3.10.14/drivers/mtd/nand/Kconfig
===================================================================
--- linux-3.10.14.orig/drivers/mtd/nand/Kconfig	2015-12-31 11:55:33.000000000 +0800
+++ linux-3.10.14/drivers/mtd/nand/Kconfig	2016-02-01 11:32:22.317324517 +0800
@@ -22,6 +22,13 @@
 
 if MTD_NAND
 
+config SUPPORT_MSTC_NAND_PARTITION
+	bool "Support MSTC NAND Partition Layout"
+	default n
+	help
+	  This enables support for MSTC NAND Partition Layout.
+	
+
 config MTD_NAND_BCH
 	tristate
 	select BCH
Index: linux-3.10.14/drivers/mtd/nand/mtk_nand.c
===================================================================
--- linux-3.10.14.orig/drivers/mtd/nand/mtk_nand.c	2015-12-31 12:16:14.000000000 +0800
+++ linux-3.10.14/drivers/mtd/nand/mtk_nand.c	2016-02-01 11:32:22.317324517 +0800
@@ -2252,7 +2252,38 @@
 
 
 #if defined(SKIP_BAD_BLOCK)
+/*
+    __MSTC__, Smith, support MSTC NAND partition
+	It's fixed partition is not define sequential 
+*/
+#if defined(CONFIG_SUPPORT_MSTC_NAND_PARTITION)
+static int get_start_end_block(struct mtd_info *mtd, int block, int *start_blk, int *end_blk)
+{
+	struct nand_chip *chip = mtd->priv;
+	int i;
 
+	*start_blk = 0;
+	for (i = 0; i <= part_num; i++)
+	{
+		// skip All partition entry
+		if (g_pasStatic_Partition[i].size == MTDPART_SIZ_FULL)
+		{
+			continue;
+		}
+		*start_blk = (g_pasStatic_Partition[i].offset >> chip->phys_erase_shift);
+		*end_blk = *start_blk + (g_pasStatic_Partition[i].size >> chip->phys_erase_shift) - 1;
+		if ((block >= *start_blk) && (block <= *end_blk))
+		{
+			break;
+		}
+	}
+	if (*start_blk > *end_blk)
+	{
+		return -1;
+	}
+	return 0;
+}
+#else
 static int get_start_end_block(struct mtd_info *mtd, int block, int *start_blk, int *end_blk)
 {
 	struct nand_chip *chip = mtd->priv;
@@ -2299,6 +2330,7 @@
 	}
 	return 0;
 }
+#endif
 
 static int block_remap(struct mtd_info *mtd, int block)
 {
@@ -4800,6 +4832,12 @@
 #endif	
 #else
 #if defined (__KERNEL_NAND__)
+#if defined(CONFIG_SUPPORT_MSTC_NAND_PARTITION)
+/*
+	__MSTC__, Smith, support MSTC NAND partition
+	if enabled CONFIG_SUPPORT_MSTC_NAND_PARTITION, you need write correct partition offset and size in mstc_partitions.h
+*/
+#else
 	/* modify partition table */
 	g_pasStatic_Partition[1].size = LARGE_MTD_BOOT_PART_SIZE;
     g_pasStatic_Partition[2].size = LARGE_MTD_CONFIG_PART_SIZE;
@@ -4859,6 +4897,7 @@
 #error "No cpde to handle this case in MTK NAND Driver..."
 #endif		
 #endif
+#endif
 	err = add_mtd_partitions(mtd, g_pasStatic_Partition, part_num);
 	//err = mtd_device_register(mtd, g_pasStatic_Partition, part_num);
 #endif
Index: linux-3.10.14/drivers/mtd/nand/mstc_partitions.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-3.10.14/drivers/mtd/nand/mstc_partitions.h	2016-02-02 10:41:24.640571748 +0800
@@ -0,0 +1,73 @@
+/*
+	This partition layout is use for MiCAP-3340C
+	128MB NAND Flash
+	Blocksize 0x20000
+*/
+#ifndef __MSTC_PARTITION_H__
+#define __MSTC_PARTITION_H__
+
+#define LARGE_MTD_BOOT_PART_SIZE       0x100000
+#define LARGE_MTD_CONFIG_PART_SIZE     0x100000
+#define LARGE_MTD_FACTORY_PART_SIZE    0x100000
+#define MTD_SECOND_BOOT_PART_SIZE      0x100000
+#define MTD_FIRMWARE_SIZE              0x3200000
+
+#ifdef CONFIG_RT2880_ROOTFS_IN_FLASH
+#define MTD_ROOTFS_RESERVED_BLOCK	0x80000
+#endif
+
+#if defined(CONFIG_SUPPORT_OPENWRT)
+/*
+	offset must init a number, do not use MTDPART_OFS_APPEND
+*/
+static struct mtd_partition g_pasStatic_Partition[] = {
+	{
+	        name:           "ALL",
+	        size:           MTDPART_SIZ_FULL,
+	        offset:         0,
+	},
+	/* Put your own partition definitions here */
+	{
+	        name:           "Bootloader",
+	        size:           LARGE_MTD_BOOT_PART_SIZE,
+	        offset:         0,
+	}, {
+	        name:           "Ubootenv",
+	        size:           LARGE_MTD_CONFIG_PART_SIZE,
+	        offset:         0x100000,
+	}, {
+	        name:           "Factory",
+	        size:           LARGE_MTD_FACTORY_PART_SIZE,
+	        offset:         0x200000,
+	}, {
+	        name:           "firmware",
+	        size:           MTD_FIRMWARE_SIZE,
+	        offset:         0x400000,
+	}, {
+	        name:           "Config",
+	        size:           LARGE_MTD_CONFIG_PART_SIZE,
+	        offset:         0x3600000,
+	}, {
+	        name:           "firmware_2",
+	        size:           MTD_FIRMWARE_SIZE,
+	        offset:         0x3700000,
+	}, {
+	        name:           "Config_2",
+	        size:           LARGE_MTD_CONFIG_PART_SIZE,
+	        offset:         0x6900000,
+	}, {
+	        name:           "persist",
+	        size:           LARGE_MTD_CONFIG_PART_SIZE,
+	        offset:         0x6a00000,
+	}, {
+	        name:           "Backup",
+	        size:           0x1480000,
+	        offset:         0x6b00000,
+	}, {
+	        name:           "SecondBoot",
+	        size:           MTD_SECOND_BOOT_PART_SIZE,
+	        offset:         0x300000,
+	}, 
+};
+#endif
+#endif    //__MSTC_PARTITION_H__
